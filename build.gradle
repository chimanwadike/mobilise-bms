plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id "org.flywaydb.flyway" version "9.21.1"
}

group = 'com.mobilise'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

flyway {
	user = dbUser
	password = dbPassword
	url = dbUrl
	locations = ["filesystem:$migrationDir"]
	sqlMigrationPrefix = appContext
	baselineOnMigrate = true
	outOfOrder = true //to allow migration of lower than current version
	cleanDisabled = false
}

task prefixNewMigrations {

	fileTree(dir: migrationDir).exclude({ isFilePrefixed(it.file) }).each { file ->
		doLast {
			def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))

			println "Renaming $file.name to ${appContext}${timestamp}__$file.name"

			file.renameTo("$file.parentFile.absolutePath$file.separator${appContext}${timestamp}__$file.name")

			// Sleep for a moment to avoid prefix conflicts when renaming multiple files
			sleep(1 * 1000)
		}
	}
}

def isFilePrefixed(file) {
	return (file.name ==~ '^.*\\d+__.*\\.sql\$')
}

flywayInfo.dependsOn prefixNewMigrations
flywayMigrate.dependsOn prefixNewMigrations

bootRun.dependsOn rootProject.tasks['flywayMigrate']
